<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://zhiying-fan.github.io//</id><title>Zhiying's iOS Star</title><subtitle>A personal blog for sharing iOS knowledge</subtitle> <updated>2023-09-22T09:41:10+08:00</updated> <author> <name>Zhiying Fan</name> <uri>https://zhiying-fan.github.io//</uri> </author><link rel="self" type="application/atom+xml" href="https://zhiying-fan.github.io//feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://zhiying-fan.github.io//"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2023 Zhiying Fan </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Desperate Housewives S01E04</title><link href="https://zhiying-fan.github.io//posts/english-desperate-housewives-s01e04/" rel="alternate" type="text/html" title="Desperate Housewives S01E04" /><published>2023-09-20T20:00:00+08:00</published> <updated>2023-09-20T20:00:00+08:00</updated> <id>https://zhiying-fan.github.io//posts/english-desperate-housewives-s01e04/</id> <content src="https://zhiying-fan.github.io//posts/english-desperate-housewives-s01e04/" /> <author> <name>Zhiying Fan</name> </author> <category term="English" /> <summary> Desperate Housewives S01E04 1–Anybody home?有人在家吗 2–Previously on Desperate Housewives《绝望主妇》前情提要 3— Susan played with fire… - That’s not my cup.-苏珊玩火 -那不是我的 4–And could get burned.最终可能会引火上身 5–Go to a spa, go shopping. Find a way to relax.做水疗也好 购物也好 总之放松放松 6— Gabrielle… - Get here as fast as you can.-加布丽尔 -那尽快过来 7–found herself a playmate.给自己找了个玩伴 8–Lynette couldn’t get her kids to stop playing.... </summary> </entry> <entry><title>读《Swift 异步与并发编程》</title><link href="https://zhiying-fan.github.io//posts/book-swift-async/" rel="alternate" type="text/html" title="读《Swift 异步与并发编程》" /><published>2023-08-12T20:00:00+08:00</published> <updated>2023-08-12T20:00:00+08:00</updated> <id>https://zhiying-fan.github.io//posts/book-swift-async/</id> <content src="https://zhiying-fan.github.io//posts/book-swift-async/" /> <author> <name>Zhiying Fan</name> </author> <category term="读书" /> <summary> Swift 在 5.5 版本中加入了 async/await 语法来简化异步编程，他们的基础用法不难，但是如果要深入理解并且结合 Actor 来更好的使用，还是需要对其深入学习。这本王巍写的《Swift 异步与并发编程》，在《Swift 进阶》书籍的基础上，对异步编程进行了更详细的讲解，非常值得一读。 对一些基本概念的图文澄清 同步 同步操作意味着在操作完成之前，运行这个操作的线程都将被占用，直到函数最终被抛出或者返回。在函数返回之前，运行它的线程无法执行其他操作。 异步 我们将运行在后台线程加载数据的行为称为异步操作，区别于同步，它不会阻塞运行这个函数的线程，带来的好处就是不会阻塞 UI 的更新。 串行 串行严格按照函数被调用的先后顺序发生，同步和异步都可能会有串行的运行方式。 同步串行 异步串行 并行 可以在不同的线程中同时执行多个函数的方式，我... </summary> </entry> <entry><title>使用 Fastlane 在 GitLab 上搭建 Pipeline</title><link href="https://zhiying-fan.github.io//posts/ios-pipeline-gitlab-using-fastlane/" rel="alternate" type="text/html" title="使用 Fastlane 在 GitLab 上搭建 Pipeline" /><published>2022-05-26T20:00:00+08:00</published> <updated>2022-05-26T20:00:00+08:00</updated> <id>https://zhiying-fan.github.io//posts/ios-pipeline-gitlab-using-fastlane/</id> <content src="https://zhiying-fan.github.io//posts/ios-pipeline-gitlab-using-fastlane/" /> <author> <name>Zhiying Fan</name> </author> <category term="iOS" /> <summary> 最近在 GitLab 上面给一个新的工程搭建了一条 Pipeline，所做的事情就是每次有代码提交，都会自动运行测试、安全检查然后打包上传到 TestFlight 以供测试。本以为基本上跟着文档做就会很顺利，不过这过程中还是踩了一些坑的，所以这边记录下来整个过程，希望可以形成一个完整的操作手册，只要一步步来基本就能完成搭建。 1. 给自己的工程配置 Fastlane 使用 bundler 来安装 Fastlane $ gem install bundler 在根目录下创建一个 Gemfile 文件，并将下面内容放进去： source "https://rubygems.org" gem "fastlane" 然后执行 $ bundle install $ git add Gemfile Gemfile.lock Fastlane 装好之后就该配置了，执行初始化... </summary> </entry> <entry><title>Desperate Housewives S01E03</title><link href="https://zhiying-fan.github.io//posts/english-desperate-housewives-s01e03/" rel="alternate" type="text/html" title="Desperate Housewives S01E03" /><published>2022-05-24T20:00:00+08:00</published> <updated>2022-05-24T20:00:00+08:00</updated> <id>https://zhiying-fan.github.io//posts/english-desperate-housewives-s01e03/</id> <content src="https://zhiying-fan.github.io//posts/english-desperate-housewives-s01e03/" /> <author> <name>Zhiying Fan</name> </author> <category term="English" /> <summary> Desperate Housewives S01E03 1–She was his wife.她是他妻子 2–He deserves to have all the facts.他有权知道事情的真相 3–She abandoned her husband and her 但她就这样抛弃了她的丈夫和孩子 4–son and I’ll never forgive her.我永远不会原谅她 5–It’s the age-old question,又回到老问题上了 6–how much do we want to know about our neighbors?我们到底有多想知道邻居的秘密 7–You gonna cancel the meeting with the divorce lawyer.请你取消和离婚律师的见面 8–We’ll find a marriage councilo... </summary> </entry> <entry><title>使用 Page Object Model 来写 UI Test</title><link href="https://zhiying-fan.github.io//posts/ui-testing-using-page-object-model/" rel="alternate" type="text/html" title="使用 Page Object Model 来写 UI Test" /><published>2022-05-12T20:00:00+08:00</published> <updated>2022-05-12T20:00:00+08:00</updated> <id>https://zhiying-fan.github.io//posts/ui-testing-using-page-object-model/</id> <content src="https://zhiying-fan.github.io//posts/ui-testing-using-page-object-model/" /> <author> <name>Zhiying Fan</name> </author> <category term="iOS" /> <summary> 随着 SwiftUI 的使用，使得现在写 UI Test 也更为容易了一些，一般的视图都能够被分离出来，单独拿出来进行测试。如果再加上 Page Object Model，那么将能够给写 UI Test 锦上添花。下面就来一探究竟吧。 本文的示例代码来自于 UI Testing using Page Object pattern in Swift 例子使用一个简单的登录界面，大家可以把它简单地想象成这样子： 基本的测试写法 我们希望测试这个界面的界面元素和登录交互，代码可以长这个样子： final class LoginTests: XCTestCase { var app: XCUIApplication! override func setUp() { continueAfterFailure = false app... </summary> </entry> </feed>
